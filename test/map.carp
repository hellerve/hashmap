(load "map.carp")
(use Map)

(load "Test.carp")
(use Test)

(defn main []
  (with-test test
    (assert-equal test
                  "2"
                  &(Map.get &(Map.put (Map.create 16) "1" "2") "1")
                  "basic put and get works"
    )
    (assert-equal test
                  1
                  (Map.count &(Map.put (Map.create 16) "1" "2"))
                  "length works"
    )
    (assert-equal test
                  0
                  (Map.count &(the (Map.Map Int Int) (Map.create 1024)))
                  "length works on empty map"
    )
    (assert-equal test
                  false
                  (Map.contains? &(the (Map.Map String Int) (Map.create 1024)) "1")
                  "contains? works on empty map"
    )
    (assert-equal test
                  true
                  (Map.contains? &(Map.put (Map.create 1024) "1" "2") "1")
                  "contains? works"
    )
    (assert-equal test
                  true
                  (Map.empty? &(the (Map Int Int) (Map.create 1024)))
                  "empty? works on empty map"
    )
    (assert-equal test
                  false
                  (Map.empty? &(Map.put (Map.create 1024) "1" "2"))
                  "empty? works"
    )
    (assert-equal test
                  true
                  (Map.empty? &(Map.remove (Map.put (Map.create 16) "1" "2") "1"))
                  "remove works"
    )
    (print-test-results test))))
